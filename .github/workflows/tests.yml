name: Tests

on:
  push:
    branches: [ main ]
    paths: 
      - 'dist/*.js'
      - '.github/workflows/tests.yml'
  pull_request:
    branches: [ main ]

jobs:
  test-defaults:
    name: Test Default Inputs
    strategy:
      matrix:
        os: [ macos-12, ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: maxim-lobanov/setup-xcode@v1.5.1
        if: ${{ runner.os == 'macOS' }}
        with:
          xcode-version: ^14.0
      - name: Install Swift
        if: ${{ runner.os == 'Linux' }}
        uses: sersoft-gmbh/swifty-linux-action@v2.1.1
        with:
          release-version: 5.6
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install dependencies
        if: ${{ github.event_name == 'pull_request' }}
        run: sudo npm i -g typescript @vercel/ncc
      - uses: actions/checkout@v3.2.0
      - name: Generate action code
        if: ${{ github.event_name == 'pull_request' }}
        run: npm run deploy
      - uses: sersoft-gmbh/xcodebuild-action@v2.0.1
        if: ${{ runner.os == 'macOS' }}
        with:
          spm-package: __test__/TestProject
          scheme: TestProject-Package
          destination: platform=macOS
          action: test
          enable-code-coverage: true
          parallel-testing-enabled: true
      - run: swift test --parallel --enable-code-coverage
        working-directory: __test__/TestProject
      - run: ln -s __test__/TestProject/.build .build
      - uses: sersoft-gmbh/swift-coverage-action@main
        if: ${{ github.event_name == 'push' }}
      - uses: './'
        if: ${{ github.event_name == 'pull_request' }}
      - name: Check for produced coverage files
        run: | # check that the directory exists and contains files
          test -d '.swiftcov' && \
          test "$(find '.swiftcov' -name '*.lcov')" != ''

  test-customized:
    name: Test Customized Inputs
    strategy:
      matrix:
        os: [ macos-12, ubuntu-latest ]
        cov-format: [ 'txt', 'lcov' ]
    env:
      INPUT_DERIVED_DATA: .derived-data
      INPUT_SEARCH_PATHS: |
        __test__/TestProject/.build
        .derived-data
      INPUT_TARGET_NAME_FILTER: TestProject(1|Package).*
      INPUT_OUTPUT_FOLDER: .swiftcov-test
    runs-on: ${{ matrix.os }}
    steps:
      - uses: maxim-lobanov/setup-xcode@v1.5.1
        if: ${{ runner.os == 'macOS' }}
        with:
          xcode-version: ^14.0
      - name: Install Swift
        if: ${{ runner.os == 'Linux' }}
        uses: sersoft-gmbh/swifty-linux-action@v2.1.1
        with:
          release-version: 5.6
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install dependencies
        if: ${{ github.event_name == 'pull_request' }}
        run: sudo npm i -g typescript @vercel/ncc
      - uses: actions/checkout@v3.2.0
      - name: Generate action code
        if: ${{ github.event_name == 'pull_request' }}
        run: npm run deploy
      - uses: sersoft-gmbh/xcodebuild-action@v2.0.1
        if: ${{ runner.os == 'macOS' }}
        with:
          spm-package: __test__/TestProject
          scheme: TestProject-Package
          destination: platform=macOS
          action: test
          enable-code-coverage: true
          parallel-testing-enabled: true
          derived-data-path: ${{ env.INPUT_DERIVED_DATA }}
      - run: swift test --parallel --enable-code-coverage
        working-directory: __test__/TestProject
      - uses: sersoft-gmbh/swift-coverage-action@main
        if: ${{ github.event_name == 'push' }}
        with:
          format: ${{ matrix.cov-format }}
          search-paths: ${{ env.INPUT_SEARCH_PATHS }}
          output: ${{ env.INPUT_OUTPUT_FOLDER }}
          target-name-filter: ${{ env.INPUT_TARGET_NAME_FILTER }}
      - uses: './'
        if: ${{ github.event_name == 'pull_request' }}
        with:
          format: ${{ matrix.cov-format }}
          search-paths: ${{ env.INPUT_SEARCH_PATHS }}
          output: ${{ env.INPUT_OUTPUT_FOLDER }}
          target-name-filter: ${{ env.INPUT_TARGET_NAME_FILTER }}
      - name: Check for produced coverage files
        env:
          RUNNER_OS: ${{ runner.os }}
          COV_FORMAT: ${{ matrix.cov-format }}
        run: | # check that the directory exists and contains files
          test -d "${INPUT_OUTPUT_FOLDER}" && { \
            { \
              test "${RUNNER_OS}" == 'macOS' && \
              test "$(find "${INPUT_OUTPUT_FOLDER}" -name "TestProject1*.${COV_FORMAT}")" != ''; \
            } \
            || \
            { \
              test "${RUNNER_OS}" == 'Linux' && \
              test "$(find "${INPUT_OUTPUT_FOLDER}" -name "TestProjectPackage*.${COV_FORMAT}")" != ''; \
            }; \
          } && \
          test "$(find "${INPUT_OUTPUT_FOLDER}" -name "TestProject2*.${COV_FORMAT}")" == ''
